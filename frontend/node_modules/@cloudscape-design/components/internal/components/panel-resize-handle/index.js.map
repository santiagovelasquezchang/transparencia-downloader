{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/internal/components/panel-resize-handle/index.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,kBAAuC,MAAM,gBAAgB,CAAC;AAErE,OAAO,MAAM,MAAM,iBAAiB,CAAC;AAarC,eAAe,KAAK,CAAC,UAAU,CAAoC,SAAS,iBAAiB,CAC3F,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,gBAAgB,EAAE,SAAS,EAAE,aAAa,EAAE,EACzG,GAAG;IAEH,OAAO,CACL,oBAAC,kBAAkB,IACjB,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,QAAQ,EAAE,CAAC,CAAC,EACvE,SAAS,EAAE,SAAS,EACpB,WAAW,EAAE,WAAW,EACxB,SAAS,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,YAAY,EAAE,EACjE,OAAO,EAAE,QAAQ,KAAK,MAAM,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,iBAAiB,EACtE,UAAU,EACR,QAAQ,KAAK,MAAM;YACjB,CAAC,CAAC;gBACE,YAAY,EAAE,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ;gBACxD,cAAc,EAAE,YAAY,KAAK,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ;aAC7D;YACH,CAAC,CAAC;gBACE,WAAW,EAAE,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ;gBACvD,aAAa,EAAE,YAAY,KAAK,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ;aAC5D,EAEP,gBAAgB,EAAE,gBAAgB,EAClC,SAAS,EAAE,SAAS,EACpB,aAAa,EAAE,aAAa,EAC5B,GAAG,EAAE,GAAG,GACR,CACH,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport InternalDragHandle, { DragHandleProps } from '../drag-handle';\n\nimport styles from './styles.css.js';\n\ninterface ResizeHandleProps {\n  className?: string;\n  ariaLabel: string | undefined;\n  tooltipText?: string | undefined;\n  position: 'side' | 'bottom';\n  ariaValuenow: number;\n  onDirectionClick: DragHandleProps['onDirectionClick'];\n  onKeyDown: (event: React.KeyboardEvent<HTMLElement>) => void;\n  onPointerDown: (event: React.PointerEvent<HTMLElement>) => void;\n}\n\nexport default React.forwardRef<HTMLDivElement, ResizeHandleProps>(function PanelResizeHandle(\n  { className, ariaLabel, tooltipText, ariaValuenow, position, onDirectionClick, onKeyDown, onPointerDown },\n  ref\n) {\n  return (\n    <InternalDragHandle\n      className={clsx(className, styles.slider, styles[`slider-${position}`])}\n      ariaLabel={ariaLabel}\n      tooltipText={tooltipText}\n      ariaValue={{ valueMin: 0, valueMax: 100, valueNow: ariaValuenow }}\n      variant={position === 'side' ? 'resize-horizontal' : 'resize-vertical'}\n      directions={\n        position === 'side'\n          ? {\n              'inline-end': ariaValuenow === 0 ? 'disabled' : 'active',\n              'inline-start': ariaValuenow === 100 ? 'disabled' : 'active',\n            }\n          : {\n              'block-end': ariaValuenow === 0 ? 'disabled' : 'active',\n              'block-start': ariaValuenow === 100 ? 'disabled' : 'active',\n            }\n      }\n      onDirectionClick={onDirectionClick}\n      onKeyDown={onKeyDown}\n      onPointerDown={onPointerDown}\n      ref={ref}\n    />\n  );\n});\n"]}