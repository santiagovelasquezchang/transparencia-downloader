{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/flashbar/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { ButtonProps } from '../button/interfaces';\nimport { ErrorContext } from '../internal/analytics/interfaces';\nimport { BaseComponentProps } from '../internal/base-component';\n\nexport namespace FlashbarProps {\n  export interface MessageDefinition {\n    header?: React.ReactNode;\n    content?: React.ReactNode;\n    dismissible?: boolean;\n    dismissLabel?: string;\n    statusIconAriaLabel?: string;\n    loading?: boolean;\n    type?: FlashbarProps.Type;\n    ariaRole?: FlashbarProps.AriaRole;\n    action?: React.ReactNode;\n    id?: string;\n    buttonText?: ButtonProps['children'];\n    onButtonClick?: ButtonProps['onClick'];\n    onDismiss?: ButtonProps['onClick'];\n    analyticsMetadata?: FlashbarProps.ItemAnalyticsMetadata;\n  }\n\n  export interface ItemAnalyticsMetadata {\n    suppressFlowMetricEvents?: boolean;\n    errorContext?: ErrorContext;\n  }\n\n  export interface I18nStrings {\n    ariaLabel?: string;\n    errorIconAriaLabel?: string;\n    infoIconAriaLabel?: string;\n    inProgressIconAriaLabel?: string;\n    notificationBarAriaLabel?: string;\n    notificationBarText?: string;\n    successIconAriaLabel?: string;\n    warningIconAriaLabel?: string;\n  }\n\n  export interface Style {\n    item?: {\n      root?: {\n        background?: {\n          error?: string;\n          info?: string;\n          inProgress?: string;\n          success?: string;\n          warning?: string;\n        };\n        borderColor?: {\n          error?: string;\n          info?: string;\n          inProgress?: string;\n          success?: string;\n          warning?: string;\n        };\n        borderRadius?: string;\n        borderWidth?: string;\n        color?: {\n          error?: string;\n          info?: string;\n          inProgress?: string;\n          success?: string;\n          warning?: string;\n        };\n        focusRing?: {\n          borderColor?: string;\n          borderRadius?: string;\n          borderWidth?: string;\n        };\n      };\n      dismissButton?: {\n        color?: {\n          active?: string;\n          default?: string;\n          hover?: string;\n        };\n        focusRing?: {\n          borderColor?: string;\n          borderRadius?: string;\n          borderWidth?: string;\n        };\n      };\n    };\n    notificationBar?: {\n      root: {\n        background?: {\n          active?: string;\n          default?: string;\n          hover?: string;\n        };\n        borderColor?: {\n          active?: string;\n          default?: string;\n          hover?: string;\n        };\n        borderRadius?: string;\n        borderWidth?: string;\n        color?: {\n          active?: string;\n          default?: string;\n          hover?: string;\n        };\n      };\n    };\n  }\n\n  export type Type = 'success' | 'warning' | 'info' | 'error' | 'in-progress';\n  export type AriaRole = 'alert' | 'status';\n}\n\nexport interface FlashbarProps extends BaseComponentProps {\n  /**\n   * Specifies flash messages that appear in the same order that they are listed.\n   * The value is an array of flash message definition objects.\n   *\n   * A flash message object contains the following properties:\n   * * `header` (ReactNode) - Specifies the heading text.\n   * * `content` (ReactNode) - Specifies the primary text displayed in the flash element.\n   * * `type` (string) - Indicates the type of the message to be displayed. Allowed values are as follows: `success, error, warning, info, in-progress`. The default is `info`.\n   * * `loading` (boolean) - Replaces the status icon with a spinner and forces the type to `info`.\n   * * `dismissible` (boolean) - Determines whether the component includes a close button icon. By default, the close button is not included.\n   * When a user clicks on this button the `onDismiss` handler is called.\n   * * `dismissLabel` (string) - Specifies an `aria-label` for to the dismiss icon button for improved accessibility.\n   * * `statusIconAriaLabel` (string) - Specifies an `aria-label` for to the status icon for improved accessibility.\n   * If not provided, `i18nStrings.{type}IconAriaLabel` will be used as a fallback.\n   * * `ariaRole` (string) - For flash messages added after page load, specifies how this message is communicated to assistive\n   * technology. Use \"status\" for status updates or informational content. Use \"alert\" for important messages that need the\n   * user's attention.\n   * * `action` (ReactNode) - Specifies an action for the flash message. Although it is technically possible to insert any content,\n   * our UX guidelines only allow you to add a button.\n   * * `buttonText` (string) - Specifies that an action button should be displayed, with the specified text.\n   * When a user clicks on this button the `onButtonClick` handler is called.\n   * If the `action` property is set, this property is ignored. **Deprecated**, replaced by `action`.\n   * * `onButtonClick` (event => void) - Called when a user clicks on the action button. This is not called if you create a custom button\n   *   using the `action` property. **Deprecated**, replaced by `action`.\n   * * `id` (string) - Specifies a unique flash message identifier. This property is used in two ways:\n   *   1. As a [keys](https://reactjs.org/docs/lists-and-keys.html#keys) source for React rendering.\n   *   2. To identify which flash message will be removed from the DOM when it is dismissed, to animate it out.\n   * * `analyticsMetadata` (FlashbarProps.ItemAnalyticsMetadata) - (Optional) Specifies additional analytics-related metadata.\n   *   * `suppressFlowMetricEvents` - Prevent this item from generating events related to flow metrics.\n   * @analytics\n   */\n  items: ReadonlyArray<FlashbarProps.MessageDefinition>;\n\n  /**\n   * Specifies whether flash messages should be stacked.\n   */\n  stackItems?: boolean;\n\n  /**\n   * An object containing all the necessary localized strings required by the component. The object should contain:\n   *\n   * * `ariaLabel` - Specifies the ARIA label for the list of notifications.\n   *\n   * If `stackItems` is set to `true`, it should also contain:\n   *\n   * * `notificationBarAriaLabel` - (optional) Specifies the ARIA label for the notification bar\n   * * `notificationBarText` - (optional) Specifies the text shown in the notification bar\n   * * `errorIconAriaLabel` - (optional) Specifies the ARIA label for the icon displayed next to the number of items of type `error`.\n   * * `warningIconAriaLabel` - (optional) Specifies the ARIA label for the icon displayed next to the number of items of type `warning`.\n   * * `infoIconAriaLabel` - (optional) Specifies the ARIA label for the icon displayed next to the number of items of type `info`.\n   * * `successIconAriaLabel` - (optional) Specifies the ARIA label for the icon displayed next to the number of items of type `success`.\n   * * `inProgressIconAriaLabel` - (optional) Specifies the ARIA label for the icon displayed next to the number of items of type `in-progress` or with `loading` set to `true`.\n   * @i18n\n   */\n  i18nStrings?: FlashbarProps.I18nStrings;\n\n  /**\n   * Specifies an object of selectors and properties that are used to apply custom styles.\n   *\n   * - `item.root.background` {error, info, inProgress, success, warning} - (Optional) Background for item types.\n   * - `item.root.borderColor` {error, info, inProgress, success, warning} - (Optional) Border color for item types.\n   * - `item.root.borderRadius` (string) - (Optional) Item border radius.\n   * - `item.root.borderWidth` (string) - (Optional) Item border width.\n   * - `item.root.color` {error, info, inProgress, success, warning} - (Optional) Color for item types.\n   * - `item.root.focusRing.borderColor` (string) - (Optional) Item focus ring border color.\n   * - `item.root.focusRing.borderRadius` (string) - (Optional) Item focus ring border radius.\n   * - `item.root.focusRing.borderWidth` (string) - (Optional) Item focus ring border width.\n   * - `item.dismissButton.color` {active, default, hover} - (Optional) Color for dismiss button states.\n   * - `item.dismissButton.focusRing.borderColor` (string) - (Optional) Dismiss button focus ring border color.\n   * - `item.dismissButton.focusRing.borderRadius` (string) - (Optional) Dismiss button focus ring border radius.\n   * - `item.dismissButton.focusRing.borderWidth` (string) - (Optional) Dismiss button focus ring border width.\n   * - `notificationBar.root.background` {active, default, hover} - (Optional) Background for notification bar states.\n   * - `notificationBar.root.borderColor` {active, default, hover} - (Optional) Border color for notification bar states.\n   * - `notificationBar.root.borderRadius` (string) - (Optional) Notification bar border radius.\n   * - `notificationBar.root.borderWidth` (string) - (Optional) Notification bar border width.\n   * - `notificationBar.root.color` {active, default, hover} - (Optional) Color for notification bar states.\n   * @awsuiSystem core\n   */\n  style?: FlashbarProps.Style;\n}\n"]}